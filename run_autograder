#!/usr/bin/env bash

TEST_STUDENT_MAIN=true
TEST_STUDENT_TESTS=true

# START: Sets correct directories based on local dev machine vs Gradescope production
if [ -f "/autograder/harness.py" ]; then
    echo "[GS] Running on Gradescope container, using Gradescope vars"
    DIR="/autograder/source"
    OUTPUT_DIR="/autograder/results"
    STUDENT_SUBMISSION_DIR="/autograder/submission"
else 
    echo "[GS] Running on local dev machine, using ./localautograder/ "
    DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
    OUTPUT_DIR="$DIR/localautograder/results"
    STUDENT_SUBMISSION_DIR="$DIR/localautograder/submission"
fi
PYTHON_JSON_TOOL="$DIR/tools/json_generator.py"
# END: Sets correct directories based on local dev machine vs Gradescope production


###########################################################################################
#
#   Prepare student files for submission:
#       - Unzip all zip files, search for /src/main/, and move to staging/src/main/
#       - Print elegant error if src not found showing all files that were found
#
###########################################################################################
cd $STUDENT_SUBMISSION_DIR

echo '[GS] Extracting zips in student submission...'
find . -name "*.zip" | while read filename; do unzip -o -d "`dirname "$filename"`" "$filename"; done;

# Clean out __MACOSX directories and hidden files
find . -name "__MACOSX" -exec rm -rf {} \;

# Remove old results.json files
rm -r $OUTPUT_DIR/*.json

# Searches student code for a DIR_TO_COPY($1), and copies it to DESTINATION_JAVA_SRC($2)
copy_student_directory () {
    DIR_TO_COPY=$1
    DESTINATION_JAVA_SRC=$2

    STUDENT_SUBMISSION_JAVA_SRC=$(find . -path "*/$DIR_TO_COPY");
    if [ -n "$STUDENT_SUBMISSION_JAVA_SRC" ]
    then
        echo "[GS] Found student $DIR_TO_COPY directory at $STUDENT_SUBMISSION_JAVA_SRC";
        echo "  [GS] Copying $STUDENT_SUBMISSION_JAVA_SRC to $DESTINATION_JAVA_SRC";
        rm -r $DESTINATION_JAVA_SRC/*
        cp -r $STUDENT_SUBMISSION_JAVA_SRC/* $DESTINATION_JAVA_SRC/
        echo "  [GS] Copy complete!"
    else
        echo "[GS] Could not find $DIR_TO_COPY in unpacked student submission ($STUDENT_SUBMISSION_DIR). Exiting...";
        FOUND_FILES=$(ls -R)

        # Generate error for results.json
        python3 $PYTHON_JSON_TOOL -t "Unable to find $DIR_TO_COPY in student submission" -b \
        "The following files were found in student submission. If no directory structure is displayed, 
        try compressing your code before submitting it:
        $FOUND_FILES" > $OUTPUT_DIR/results00.json
        exit 1;
    fi
}

if [ "$TEST_STUDENT_MAIN" = true ] ; then
    copy_student_directory "src/main" "$DIR/staging/src/main"
    python3 $PYTHON_JSON_TOOL -p -t "Found required src/main directory in student submission"> $OUTPUT_DIR/results01.json
    $DIR/run_main_tests

fi
if [ "$TEST_STUDENT_TESTS" = true ] ; then
    copy_student_directory "src/test" "$DIR/tests_testing/tests_staging/src/test"
    python3 $PYTHON_JSON_TOOL -p -t "Found required src/test directory in student submission"> $OUTPUT_DIR/results02.json
fi

# Compile json results
echo "[GS] Compiling results**.json files to results.json"
python3 $PYTHON_JSON_TOOL -c $OUTPUT_DIR